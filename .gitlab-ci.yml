image: golang:1.12.7

# variables:
#   GIT_SUBMODULE_STRATEGY: recursive

stages:
    # - test
    - build
    # - deploy&test
    - deploy&copy
    - deploy&compose
    - message_on_success
    - message_on_failure

# before_script:
#     # import ssh-key
#     # use key name: deploy_gitupdater_works_base64
#     # public key added by user "chagin"
#     - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
#     - eval $(ssh-agent -s)
#     # Attention! Key need convert in base64 and add in secret variable PROD_RSA_PRIVATE_KEY
#     - ssh-add <(echo "$PROD_RSA_PRIVATE_KEY" | base64 --decode)
#     - mkdir -p /root/.ssh
#     - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
#     - echo "$PROD_RSA_PRIVATE_KEY" | base64 --decode > /root/.ssh/id_rsa
#     - chmod 600 /root/.ssh/id_rsa && chmod 700 /root/.ssh
#     # key for deployment
#     # use key name: deploy_gitupdater_base64
#     - ssh-add <(echo "$DEPLOY_RSA_PRIVATE_KEY" | base64 --decode)
#     - echo "$DEPLOY_RSA_PRIVATE_KEY" | base64 --decode > /root/.ssh/id_rsa_deploy
#     - chmod 600 /root/.ssh/id_rsa_deploy


build:
    stage: build
    variables:
        REPO_NAME: rgru-file-uploader
        BUILD_PATH: /builds/masterback/rgru-file-uploader
    script:

        - echo 'Copying to files to /go/src and go there------------------------------'
        - mkdir -p /go/src/$REPO_NAME
        - cp -r .  /go/src/$REPO_NAME
        - cd       /go/src/$REPO_NAME
        - pwd
        - ls -lF --color

        # building deploy directory 
        - sh/build-deploy-directory.sh

        # collect files to deploy on prod
        - rm -rf   $BUILD_PATH/deploy
        - cp -r    deploy $BUILD_PATH
        - mkdir -p $BUILD_PATH/deploy/configs
    artifacts:
        paths:
            - $BUILD_PATH/deploy
        expire_in: 60 minutes
    only:
        - production

deploy&copy:
    stage: deploy&copy
    variables:
        IMAGE_NAME: rgru-file-uploader-prod
        BUILD_PATH: /builds/masterback/rgru-file-uploader
    dependencies:
        - build
    script:
        # import ssh-key
        # use key name: deploy_gitupdater_works_base64
        # public key added by user "chagin"
        - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
        - eval $(ssh-agent -s)
        # Attention! Key need convert in base64 and add in secret variable PROD_RSA_PRIVATE_KEY
        - ssh-add <(echo "$PROD_RSA_PRIVATE_KEY" | base64 --decode)
        - mkdir -p /root/.ssh
        - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
        - echo "$PROD_RSA_PRIVATE_KEY" | base64 --decode > /root/.ssh/id_rsa
        - chmod 600 /root/.ssh/id_rsa && chmod 700 /root/.ssh
        # deploy to server 212.69.111.246
        - ls -lF
        # remove old dir
        - ssh gitupdater@212.69.111.246 'rm -rf /home/gitupdater/'$IMAGE_NAME
        # copy new dir on server
        - scp -pr $BUILD_PATH/deploy gitupdater@212.69.111.246:/home/gitupdater/$IMAGE_NAME
    only:
        - production

deploy&compose:
    stage: deploy&compose
    variables:
        IMAGE_NAME: rgru-file-uploader-prod
        BUILD_PATH: /builds/masterback/rgru-file-uploader
    dependencies:
        - deploy&copy
    script:
        # import ssh-key
        # use key name: deploy_gitupdater_base64
        # public key added by user "chagin"
        - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
        - eval $(ssh-agent -s)
        # Attention! Key need convert in base64 and add in secret variable DEPLOY_RSA_PRIVATE_KEY
        - ssh-add <(echo "$DEPLOY_RSA_PRIVATE_KEY" | base64 --decode)
        - mkdir -p /root/.ssh
        - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
        - echo "$DEPLOY_RSA_PRIVATE_KEY" | base64 --decode > /root/.ssh/id_rsa
        - chmod 600 /root/.ssh/id_rsa && chmod 700 /root/.ssh
        # !!! start real deploy and docker-compose
        - ssh gitupdater@notify.rg.ru rgru-file-uploader-prod
    only:
        - production



# deploy&test:
#     stage: deploy&test 
#     script:
#         # import ssh-key
#         - echo $PROD_RSA_PRIVATE_KEY
#     only:
#         - test



message_on_success:
    stage: message_on_success
    allow_failure: true
    dependencies:
        - deploy&compose
    when: on_success
    script:
        # send to telegram proxy
        - curl -v http://proxy.govoru.com/?message=%E2%9C%85%20Success.%20Auto%20deploy%20on%20${CI_PROJECT_NAME}%20is%20completed,%20Pipeline:%20${CI_PIPELINE_URL}%20by%20${GITLAB_USER_LOGIN}
    only:
        - production

message_on_failure:
    stage: message_on_failure
    allow_failure: true
    dependencies:
        - deploy&compose
    when: on_failure
    script:
        # send to telegram proxy
        - curl -v http://proxy.govoru.com/?message=%E2%9D%8C%20Error.%20Auto%20deploy%20on%20${CI_PROJECT_NAME}%20is%20failed,%20Pipeline:%20${CI_PIPELINE_URL}%20by%20${GITLAB_USER_LOGIN}
    only:
        - production
