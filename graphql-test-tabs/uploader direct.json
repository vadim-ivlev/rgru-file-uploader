{"url":"http://localhost:5500/schema","credentials":false,"controls":[{"id":"uploader direct-List-mutation-crop_image-argument-file_path-checkbox","type":"checkbox","checked":true,"value":"on"},{"id":"uploader direct-List-mutation-crop_image-argument-file_path-input","type":"text","checked":false,"value":"/2020/01/16/88864/London-skyline.jpg"},{"id":"uploader direct-List-mutation-crop_image-argument-crop_rect-checkbox","type":"checkbox","checked":true,"value":"on"},{"id":"uploader direct-List-mutation-crop_image-argument-crop_rect-input","type":"text","checked":false,"value":"{ x:500,   y:500, width:1000, height :500}"},{"id":"uploader direct-List-mutation-crop_image-ImageFile-dominant_color","type":"checkbox","checked":true,"value":"on"},{"id":"uploader direct-List-mutation-crop_image-ImageFile-dominant_color-type-DominantColor-hex","type":"checkbox","checked":true,"value":"on"},{"id":"uploader direct-List-mutation-crop_image-ImageFile-dominant_color-type-DominantColor-is_light","type":"checkbox","checked":true,"value":"on"},{"id":"uploader direct-List-mutation-crop_image-ImageFile-ext","type":"checkbox","checked":true,"value":"on"},{"id":"uploader direct-List-mutation-crop_image-ImageFile-filepath","type":"checkbox","checked":true,"value":"on"},{"id":"uploader direct-List-mutation-crop_image-ImageFile-height","type":"checkbox","checked":true,"value":"on"},{"id":"uploader direct-List-mutation-crop_image-ImageFile-initial_height","type":"checkbox","checked":true,"value":"on"},{"id":"uploader direct-List-mutation-crop_image-ImageFile-initial_size","type":"checkbox","checked":true,"value":"on"},{"id":"uploader direct-List-mutation-crop_image-ImageFile-initial_width","type":"checkbox","checked":true,"value":"on"},{"id":"uploader direct-List-mutation-crop_image-ImageFile-size","type":"checkbox","checked":true,"value":"on"},{"id":"uploader direct-List-mutation-crop_image-ImageFile-width","type":"checkbox","checked":true,"value":"on"},{"id":"uploader direct-List-mutation-upload_internet_file-argument-file_url-checkbox","type":"checkbox","checked":true,"value":"on"},{"id":"uploader direct-List-mutation-upload_internet_file-argument-file_url-input","type":"text","checked":false,"value":"https://html5css.ru/css/img_lights.jpg"},{"id":"uploader direct-List-mutation-upload_internet_file-argument-file_name-checkbox","type":"checkbox","checked":true,"value":"on"},{"id":"uploader direct-List-mutation-upload_internet_file-argument-file_name-input","type":"text","checked":false,"value":"img_lights.jpg"},{"id":"uploader direct-List-mutation-upload_internet_file-ImageFile-dominant_color","type":"checkbox","checked":true,"value":"on"},{"id":"uploader direct-List-mutation-upload_internet_file-ImageFile-dominant_color-type-DominantColor-hex","type":"checkbox","checked":true,"value":"on"},{"id":"uploader direct-List-mutation-upload_internet_file-ImageFile-dominant_color-type-DominantColor-is_light","type":"checkbox","checked":true,"value":"on"},{"id":"uploader direct-List-mutation-upload_internet_file-ImageFile-ext","type":"checkbox","checked":true,"value":"on"},{"id":"uploader direct-List-mutation-upload_internet_file-ImageFile-filepath","type":"checkbox","checked":true,"value":"on"},{"id":"uploader direct-List-mutation-upload_internet_file-ImageFile-height","type":"checkbox","checked":true,"value":"on"},{"id":"uploader direct-List-mutation-upload_internet_file-ImageFile-initial_height","type":"checkbox","checked":true,"value":"on"},{"id":"uploader direct-List-mutation-upload_internet_file-ImageFile-initial_size","type":"checkbox","checked":true,"value":"on"},{"id":"uploader direct-List-mutation-upload_internet_file-ImageFile-initial_width","type":"checkbox","checked":true,"value":"on"},{"id":"uploader direct-List-mutation-upload_internet_file-ImageFile-size","type":"checkbox","checked":true,"value":"on"},{"id":"uploader direct-List-mutation-upload_internet_file-ImageFile-width","type":"checkbox","checked":true,"value":"on"},{"id":"uploader direct-List-mutation-upload_local_file-argument-file_field_name-checkbox","type":"checkbox","checked":true,"value":"on"},{"id":"uploader direct-List-mutation-upload_local_file-argument-file_field_name-input","type":"text","checked":false,"value":"input-file"},{"id":"uploader direct-List-mutation-upload_local_file-ImageFile-dominant_color","type":"checkbox","checked":true,"value":"on"},{"id":"uploader direct-List-mutation-upload_local_file-ImageFile-dominant_color-type-DominantColor-hex","type":"checkbox","checked":true,"value":"on"},{"id":"uploader direct-List-mutation-upload_local_file-ImageFile-dominant_color-type-DominantColor-is_light","type":"checkbox","checked":true,"value":"on"},{"id":"uploader direct-List-mutation-upload_local_file-ImageFile-ext","type":"checkbox","checked":true,"value":"on"},{"id":"uploader direct-List-mutation-upload_local_file-ImageFile-filepath","type":"checkbox","checked":true,"value":"on"},{"id":"uploader direct-List-mutation-upload_local_file-ImageFile-height","type":"checkbox","checked":true,"value":"on"},{"id":"uploader direct-List-mutation-upload_local_file-ImageFile-initial_height","type":"checkbox","checked":true,"value":"on"},{"id":"uploader direct-List-mutation-upload_local_file-ImageFile-initial_size","type":"checkbox","checked":true,"value":"on"},{"id":"uploader direct-List-mutation-upload_local_file-ImageFile-initial_width","type":"checkbox","checked":true,"value":"on"},{"id":"uploader direct-List-mutation-upload_local_file-ImageFile-size","type":"checkbox","checked":true,"value":"on"},{"id":"uploader direct-List-mutation-upload_local_file-ImageFile-width","type":"checkbox","checked":true,"value":"on"},{"id":"uploader direct-List-query-ping-query","type":"textarea","value":"query {\nping\n}"},{"id":"uploader direct-List-query-ping-variables","type":"textarea","value":""},{"id":"uploader direct-List-query-ping-eval-text","type":"textarea","value":"response && !response.errors"},{"id":"uploader direct-List-mutation-crop_image-query","type":"textarea","value":"mutation {\ncrop_image(\nfile_path: \"/2020/01/16/88864/London-skyline.jpg\",\ncrop_rect: { x:900,   y:500, width:1000, height :500}\n) {\n    dominant_color {\n      hex\n      is_light\n    }\n    ext\n    filepath\n    height\n    initial_size\n    size\n    width\n  }\n}"},{"id":"uploader direct-List-mutation-crop_image-variables","type":"textarea","value":"{\n  \"path\": \"/2020/01/16/88864/London-skyline.jpg\",\n  \"rect\": {\n    \t\"x\":1,\n     \t\"y\":2,\n     \t\"width\":3,\n      \"height\":4\n   }\n}"},{"id":"uploader direct-List-mutation-crop_image-eval-text","type":"textarea","value":"function test(){\n  let html =''\n  if (response && !response.errors){\n\n    let url =\"http://localhost:5500/uploads\"+response.data.crop_image.filepath\n    let color = response.data.crop_image.dominant_color.hex\n    html =\n    `<img width=100 src=\"${url}\">\n     <div style=\"width: 50px; background-color:#${color}; color: silver;\">...</div>` \n\n  } else {\n    html = response.errors[0].message\n  } \n  return html\n}\n\ntest()\n"},{"id":"uploader direct-List-mutation-upload_internet_file-query","type":"textarea","value":"mutation {\nupload_internet_file(\nfile_name: $f,\nfile_url: $u\n) {\n    dominant_color {\n      hex\n      is_light\n    }\n    ext\n    filepath\n    height\n    initial_size\n    size\n    width\n  }\n  \n}"},{"id":"uploader direct-List-mutation-upload_internet_file-variables","type":"textarea","value":"{\n  \"f\": \"img_lights.jpg\",\n  \"u\": \"https://html5css.ru/css/img_lights.jpg\" \n}"},{"id":"uploader direct-List-mutation-upload_internet_file-eval-text","type":"textarea","value":"function test(){\n  let html =''\n  if (response && !response.errors){\n\n    let url =\"http://localhost:5500/uploads\"+response.data.upload_internet_file.filepath\n    let color = response.data.upload_internet_file.dominant_color.hex\n    html =\n    `<img width=50 src=\"${url}\">\n     <div style=\"width: 50px; background-color:#${color}; color: silver;\">...</div>` \n\n  } else {\n    html = response.errors[0].message\n  } \n  return html\n}\n\ntest()\n"},{"id":"uploader direct-List-mutation-upload_local_file-query","type":"textarea","value":"mutation {\nupload_local_file(\nfile_field_name: \"input-file\"\n) {\n    dominant_color {\n      hex\n      is_light\n    }\n    ext\n    filepath\n    height\n    initial_size\n    size\n    width\n  }\n}"},{"id":"uploader direct-List-mutation-upload_local_file-variables","type":"textarea","value":""},{"id":"uploader direct-List-mutation-upload_local_file-eval-text","type":"textarea","value":"if (response && !response.errors){\n  \n  let url =\"http://localhost:5500/uploads\"+response.data.upload_local_file.filepath\n  let color = response.data.upload_local_file.dominant_color.hex\n  console.log(color)\n  '<img width=\"50\" src=\"'+url+'\"><div style=\" max-width: 50px; background-color:#'+color+'; color: silver;\">...</div>' \n} else {\n  response.errors[0].message\n}\n"}],"scheme":{"data":{"__schema":{"directives":[{"args":[{"defaultValue":null,"description":"Included when true.","name":"if","type":{"description":null,"kind":"NON_NULL","name":null,"ofType":{"description":"The `Boolean` scalar type represents `true` or `false`.","kind":"SCALAR","name":"Boolean","ofType":null}}}],"description":"Directs the executor to include this field or fragment only when the `if` argument is true.","locations":["FIELD","FRAGMENT_SPREAD","INLINE_FRAGMENT"],"name":"include"},{"args":[{"defaultValue":null,"description":"Skipped when true.","name":"if","type":{"description":null,"kind":"NON_NULL","name":null,"ofType":{"description":"The `Boolean` scalar type represents `true` or `false`.","kind":"SCALAR","name":"Boolean","ofType":null}}}],"description":"Directs the executor to skip this field or fragment when the `if` argument is true.","locations":["FIELD","FRAGMENT_SPREAD","INLINE_FRAGMENT"],"name":"skip"},{"args":[{"defaultValue":"\"No longer supported\"","description":"Explains why this element was deprecated, usually also including a suggestion for how to access supported similar data. Formattedin [Markdown](https://daringfireball.net/projects/markdown/).","name":"reason","type":{"description":"The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.","kind":"SCALAR","name":"String","ofType":null}}],"description":"Marks an element of a GraphQL schema as no longer supported.","locations":["FIELD_DEFINITION","ENUM_VALUE"],"name":"deprecated"}],"mutationType":{"description":"","enumValues":null,"fields":[{"args":[{"defaultValue":null,"description":"File path on the server","name":"file_path","type":{"description":null,"kind":"NON_NULL","name":null,"ofType":{"description":"The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.","kind":"SCALAR","name":"String","ofType":null}}},{"defaultValue":null,"description":"Rectangular area of the image to crop","name":"crop_rect","type":{"description":null,"kind":"NON_NULL","name":null,"ofType":{"description":"Rectangular area on the image","kind":"INPUT_OBJECT","name":"InputRect","ofType":null}}}],"deprecationReason":"","description":"Crop image file","isDeprecated":false,"name":"crop_image","type":{"description":"Can be a file of any type. Not only image.","kind":"OBJECT","name":"ImageFile","ofType":null}},{"args":[{"defaultValue":null,"description":"URL of the file","name":"file_url","type":{"description":null,"kind":"NON_NULL","name":null,"ofType":{"description":"The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.","kind":"SCALAR","name":"String","ofType":null}}},{"defaultValue":null,"description":"File name for the uploaded file","name":"file_name","type":{"description":null,"kind":"NON_NULL","name":null,"ofType":{"description":"The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.","kind":"SCALAR","name":"String","ofType":null}}}],"deprecationReason":"","description":"Upload file from Internet","isDeprecated":false,"name":"upload_internet_file","type":{"description":"Can be a file of any type. Not only image.","kind":"OBJECT","name":"ImageFile","ofType":null}},{"args":[{"defaultValue":null,"description":"Input name for uploading files. Пример: <input name='fname' type='file' ...>","name":"file_field_name","type":{"description":null,"kind":"NON_NULL","name":null,"ofType":{"description":"The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.","kind":"SCALAR","name":"String","ofType":null}}}],"deprecationReason":"","description":"Upload a local file","isDeprecated":false,"name":"upload_local_file","type":{"description":"Can be a file of any type. Not only image.","kind":"OBJECT","name":"ImageFile","ofType":null}}],"inputFields":null,"interfaces":[],"kind":"OBJECT","name":"Mutation","possibleTypes":null},"queryType":{"description":"","enumValues":null,"fields":[{"args":[],"deprecationReason":"","description":"quick test","isDeprecated":false,"name":"ping","type":{"description":"The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.","kind":"SCALAR","name":"String","ofType":null}}],"inputFields":null,"interfaces":[],"kind":"OBJECT","name":"Query","possibleTypes":null},"subscriptionType":null,"types":[{"description":"The `Boolean` scalar type represents `true` or `false`.","enumValues":null,"fields":null,"inputFields":null,"interfaces":null,"kind":"SCALAR","name":"Boolean","possibleTypes":null},{"description":"Dominant color in the image","enumValues":null,"fields":[{"args":[],"deprecationReason":"","description":"Hex representation of the color","isDeprecated":false,"name":"hex","type":{"description":"The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.","kind":"SCALAR","name":"String","ofType":null}},{"args":[],"deprecationReason":"","description":"If the color looks light","isDeprecated":false,"name":"is_light","type":{"description":"The `Boolean` scalar type represents `true` or `false`.","kind":"SCALAR","name":"Boolean","ofType":null}}],"inputFields":null,"interfaces":[],"kind":"OBJECT","name":"DominantColor","possibleTypes":null},{"description":"Can be a file of any type. Not only image.","enumValues":null,"fields":[{"args":[],"deprecationReason":"","description":"Dominant color of the image","isDeprecated":false,"name":"dominant_color","type":{"description":"Dominant color in the image","kind":"OBJECT","name":"DominantColor","ofType":null}},{"args":[],"deprecationReason":"","description":"Filename extension","isDeprecated":false,"name":"ext","type":{"description":"The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.","kind":"SCALAR","name":"String","ofType":null}},{"args":[],"deprecationReason":"","description":"File URI","isDeprecated":false,"name":"filepath","type":{"description":"The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.","kind":"SCALAR","name":"String","ofType":null}},{"args":[],"deprecationReason":"","description":"Height in pixels (for images)","isDeprecated":false,"name":"height","type":{"description":"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. ","kind":"SCALAR","name":"Int","ofType":null}},{"args":[],"deprecationReason":"","description":"Height in pixels of the original image (for images)","isDeprecated":false,"name":"initial_height","type":{"description":"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. ","kind":"SCALAR","name":"Int","ofType":null}},{"args":[],"deprecationReason":"","description":"Initial file size in bytes","isDeprecated":false,"name":"initial_size","type":{"description":"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. ","kind":"SCALAR","name":"Int","ofType":null}},{"args":[],"deprecationReason":"","description":"Width in pixels of the original image (for images)","isDeprecated":false,"name":"initial_width","type":{"description":"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. ","kind":"SCALAR","name":"Int","ofType":null}},{"args":[],"deprecationReason":"","description":"Size of the optimized image in bytes","isDeprecated":false,"name":"size","type":{"description":"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. ","kind":"SCALAR","name":"Int","ofType":null}},{"args":[],"deprecationReason":"","description":"Width in pixels (for images)","isDeprecated":false,"name":"width","type":{"description":"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. ","kind":"SCALAR","name":"Int","ofType":null}}],"inputFields":null,"interfaces":[],"kind":"OBJECT","name":"ImageFile","possibleTypes":null},{"description":"Rectangular area on the image","enumValues":null,"fields":null,"inputFields":[{"defaultValue":null,"description":"height of the rectangle in pixels","name":"height","type":{"description":"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. ","kind":"SCALAR","name":"Int","ofType":null}},{"defaultValue":null,"description":"distance between LEFT sides of the image and the crop rectangle in pixels","name":"x","type":{"description":"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. ","kind":"SCALAR","name":"Int","ofType":null}},{"defaultValue":null,"description":"distance between TOP sides of the image and the crop rectangle in pixels","name":"y","type":{"description":"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. ","kind":"SCALAR","name":"Int","ofType":null}},{"defaultValue":null,"description":"width of the rectangle in pixels","name":"width","type":{"description":"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. ","kind":"SCALAR","name":"Int","ofType":null}}],"interfaces":null,"kind":"INPUT_OBJECT","name":"InputRect","possibleTypes":null},{"description":"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. ","enumValues":null,"fields":null,"inputFields":null,"interfaces":null,"kind":"SCALAR","name":"Int","possibleTypes":null},{"description":"","enumValues":null,"fields":[{"args":[{"defaultValue":null,"description":"File path on the server","name":"file_path","type":{"description":null,"kind":"NON_NULL","name":null,"ofType":{"description":"The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.","kind":"SCALAR","name":"String","ofType":null}}},{"defaultValue":null,"description":"Rectangular area of the image to crop","name":"crop_rect","type":{"description":null,"kind":"NON_NULL","name":null,"ofType":{"description":"Rectangular area on the image","kind":"INPUT_OBJECT","name":"InputRect","ofType":null}}}],"deprecationReason":"","description":"Crop image file","isDeprecated":false,"name":"crop_image","type":{"description":"Can be a file of any type. Not only image.","kind":"OBJECT","name":"ImageFile","ofType":null}},{"args":[{"defaultValue":null,"description":"URL of the file","name":"file_url","type":{"description":null,"kind":"NON_NULL","name":null,"ofType":{"description":"The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.","kind":"SCALAR","name":"String","ofType":null}}},{"defaultValue":null,"description":"File name for the uploaded file","name":"file_name","type":{"description":null,"kind":"NON_NULL","name":null,"ofType":{"description":"The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.","kind":"SCALAR","name":"String","ofType":null}}}],"deprecationReason":"","description":"Upload file from Internet","isDeprecated":false,"name":"upload_internet_file","type":{"description":"Can be a file of any type. Not only image.","kind":"OBJECT","name":"ImageFile","ofType":null}},{"args":[{"defaultValue":null,"description":"Input name for uploading files. Пример: <input name='fname' type='file' ...>","name":"file_field_name","type":{"description":null,"kind":"NON_NULL","name":null,"ofType":{"description":"The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.","kind":"SCALAR","name":"String","ofType":null}}}],"deprecationReason":"","description":"Upload a local file","isDeprecated":false,"name":"upload_local_file","type":{"description":"Can be a file of any type. Not only image.","kind":"OBJECT","name":"ImageFile","ofType":null}}],"inputFields":null,"interfaces":[],"kind":"OBJECT","name":"Mutation","possibleTypes":null},{"description":"","enumValues":null,"fields":[{"args":[],"deprecationReason":"","description":"quick test","isDeprecated":false,"name":"ping","type":{"description":"The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.","kind":"SCALAR","name":"String","ofType":null}}],"inputFields":null,"interfaces":[],"kind":"OBJECT","name":"Query","possibleTypes":null},{"description":"The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.","enumValues":null,"fields":null,"inputFields":null,"interfaces":null,"kind":"SCALAR","name":"String","possibleTypes":null},{"description":"A Directive provides a way to describe alternate runtime execution and type validation behavior in a GraphQL document. \n\nIn some cases, you need to provide options to alter GraphQL's execution behavior in ways field arguments will not suffice, such as conditionally including or skipping a field. Directives provide this by describing additional information to the executor.","enumValues":null,"fields":[{"args":[],"deprecationReason":"","description":"","isDeprecated":false,"name":"args","type":{"description":null,"kind":"NON_NULL","name":null,"ofType":{"description":null,"kind":"LIST","name":null,"ofType":{"description":null,"kind":"NON_NULL","name":null,"ofType":{"description":"Arguments provided to Fields or Directives and the input fields of an InputObject are represented as Input Values which describe their type and optionally a default value.","kind":"OBJECT","name":"__InputValue","ofType":null}}}}},{"args":[],"deprecationReason":"","description":"","isDeprecated":false,"name":"description","type":{"description":"The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.","kind":"SCALAR","name":"String","ofType":null}},{"args":[],"deprecationReason":"","description":"","isDeprecated":false,"name":"locations","type":{"description":null,"kind":"NON_NULL","name":null,"ofType":{"description":null,"kind":"LIST","name":null,"ofType":{"description":null,"kind":"NON_NULL","name":null,"ofType":{"description":"A Directive can be adjacent to many parts of the GraphQL language, a __DirectiveLocation describes one such possible adjacencies.","kind":"ENUM","name":"__DirectiveLocation","ofType":null}}}}},{"args":[],"deprecationReason":"","description":"","isDeprecated":false,"name":"name","type":{"description":null,"kind":"NON_NULL","name":null,"ofType":{"description":"The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.","kind":"SCALAR","name":"String","ofType":null}}},{"args":[],"deprecationReason":"Use `locations`.","description":"","isDeprecated":true,"name":"onField","type":{"description":null,"kind":"NON_NULL","name":null,"ofType":{"description":"The `Boolean` scalar type represents `true` or `false`.","kind":"SCALAR","name":"Boolean","ofType":null}}},{"args":[],"deprecationReason":"Use `locations`.","description":"","isDeprecated":true,"name":"onFragment","type":{"description":null,"kind":"NON_NULL","name":null,"ofType":{"description":"The `Boolean` scalar type represents `true` or `false`.","kind":"SCALAR","name":"Boolean","ofType":null}}},{"args":[],"deprecationReason":"Use `locations`.","description":"","isDeprecated":true,"name":"onOperation","type":{"description":null,"kind":"NON_NULL","name":null,"ofType":{"description":"The `Boolean` scalar type represents `true` or `false`.","kind":"SCALAR","name":"Boolean","ofType":null}}}],"inputFields":null,"interfaces":[],"kind":"OBJECT","name":"__Directive","possibleTypes":null},{"description":"A Directive can be adjacent to many parts of the GraphQL language, a __DirectiveLocation describes one such possible adjacencies.","enumValues":[{"deprecationReason":"","description":"Location adjacent to a query operation.","isDeprecated":false,"name":"QUERY"},{"deprecationReason":"","description":"Location adjacent to a mutation operation.","isDeprecated":false,"name":"MUTATION"},{"deprecationReason":"","description":"Location adjacent to an inline fragment.","isDeprecated":false,"name":"INLINE_FRAGMENT"},{"deprecationReason":"","description":"Location adjacent to an interface definition.","isDeprecated":false,"name":"INTERFACE"},{"deprecationReason":"","description":"Location adjacent to a scalar definition.","isDeprecated":false,"name":"SCALAR"},{"deprecationReason":"","description":"Location adjacent to an enum value definition.","isDeprecated":false,"name":"ENUM_VALUE"},{"deprecationReason":"","description":"Location adjacent to an input object field definition.","isDeprecated":false,"name":"INPUT_FIELD_DEFINITION"},{"deprecationReason":"","description":"Location adjacent to an argument definition.","isDeprecated":false,"name":"ARGUMENT_DEFINITION"},{"deprecationReason":"","description":"Location adjacent to a union definition.","isDeprecated":false,"name":"UNION"},{"deprecationReason":"","description":"Location adjacent to an enum definition.","isDeprecated":false,"name":"ENUM"},{"deprecationReason":"","description":"Location adjacent to an input object type definition.","isDeprecated":false,"name":"INPUT_OBJECT"},{"deprecationReason":"","description":"Location adjacent to a subscription operation.","isDeprecated":false,"name":"SUBSCRIPTION"},{"deprecationReason":"","description":"Location adjacent to a fragment definition.","isDeprecated":false,"name":"FRAGMENT_DEFINITION"},{"deprecationReason":"","description":"Location adjacent to a fragment spread.","isDeprecated":false,"name":"FRAGMENT_SPREAD"},{"deprecationReason":"","description":"Location adjacent to a field definition.","isDeprecated":false,"name":"FIELD_DEFINITION"},{"deprecationReason":"","description":"Location adjacent to a field.","isDeprecated":false,"name":"FIELD"},{"deprecationReason":"","description":"Location adjacent to a schema definition.","isDeprecated":false,"name":"SCHEMA"},{"deprecationReason":"","description":"Location adjacent to a object definition.","isDeprecated":false,"name":"OBJECT"}],"fields":null,"inputFields":null,"interfaces":null,"kind":"ENUM","name":"__DirectiveLocation","possibleTypes":null},{"description":"One possible value for a given Enum. Enum values are unique values, not a placeholder for a string or numeric value. However an Enum value is returned in a JSON response as a string.","enumValues":null,"fields":[{"args":[],"deprecationReason":"","description":"","isDeprecated":false,"name":"deprecationReason","type":{"description":"The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.","kind":"SCALAR","name":"String","ofType":null}},{"args":[],"deprecationReason":"","description":"","isDeprecated":false,"name":"description","type":{"description":"The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.","kind":"SCALAR","name":"String","ofType":null}},{"args":[],"deprecationReason":"","description":"","isDeprecated":false,"name":"isDeprecated","type":{"description":null,"kind":"NON_NULL","name":null,"ofType":{"description":"The `Boolean` scalar type represents `true` or `false`.","kind":"SCALAR","name":"Boolean","ofType":null}}},{"args":[],"deprecationReason":"","description":"","isDeprecated":false,"name":"name","type":{"description":null,"kind":"NON_NULL","name":null,"ofType":{"description":"The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.","kind":"SCALAR","name":"String","ofType":null}}}],"inputFields":null,"interfaces":[],"kind":"OBJECT","name":"__EnumValue","possibleTypes":null},{"description":"Object and Interface types are described by a list of Fields, each of which has a name, potentially a list of arguments, and a return type.","enumValues":null,"fields":[{"args":[],"deprecationReason":"","description":"","isDeprecated":false,"name":"args","type":{"description":null,"kind":"NON_NULL","name":null,"ofType":{"description":null,"kind":"LIST","name":null,"ofType":{"description":null,"kind":"NON_NULL","name":null,"ofType":{"description":"Arguments provided to Fields or Directives and the input fields of an InputObject are represented as Input Values which describe their type and optionally a default value.","kind":"OBJECT","name":"__InputValue","ofType":null}}}}},{"args":[],"deprecationReason":"","description":"","isDeprecated":false,"name":"deprecationReason","type":{"description":"The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.","kind":"SCALAR","name":"String","ofType":null}},{"args":[],"deprecationReason":"","description":"","isDeprecated":false,"name":"description","type":{"description":"The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.","kind":"SCALAR","name":"String","ofType":null}},{"args":[],"deprecationReason":"","description":"","isDeprecated":false,"name":"isDeprecated","type":{"description":null,"kind":"NON_NULL","name":null,"ofType":{"description":"The `Boolean` scalar type represents `true` or `false`.","kind":"SCALAR","name":"Boolean","ofType":null}}},{"args":[],"deprecationReason":"","description":"","isDeprecated":false,"name":"name","type":{"description":null,"kind":"NON_NULL","name":null,"ofType":{"description":"The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.","kind":"SCALAR","name":"String","ofType":null}}},{"args":[],"deprecationReason":"","description":"","isDeprecated":false,"name":"type","type":{"description":null,"kind":"NON_NULL","name":null,"ofType":{"description":"The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.\n\nDepending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name and description, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.","kind":"OBJECT","name":"__Type","ofType":null}}}],"inputFields":null,"interfaces":[],"kind":"OBJECT","name":"__Field","possibleTypes":null},{"description":"Arguments provided to Fields or Directives and the input fields of an InputObject are represented as Input Values which describe their type and optionally a default value.","enumValues":null,"fields":[{"args":[],"deprecationReason":"","description":"A GraphQL-formatted string representing the default value for this input value.","isDeprecated":false,"name":"defaultValue","type":{"description":"The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.","kind":"SCALAR","name":"String","ofType":null}},{"args":[],"deprecationReason":"","description":"","isDeprecated":false,"name":"description","type":{"description":"The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.","kind":"SCALAR","name":"String","ofType":null}},{"args":[],"deprecationReason":"","description":"","isDeprecated":false,"name":"name","type":{"description":null,"kind":"NON_NULL","name":null,"ofType":{"description":"The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.","kind":"SCALAR","name":"String","ofType":null}}},{"args":[],"deprecationReason":"","description":"","isDeprecated":false,"name":"type","type":{"description":null,"kind":"NON_NULL","name":null,"ofType":{"description":"The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.\n\nDepending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name and description, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.","kind":"OBJECT","name":"__Type","ofType":null}}}],"inputFields":null,"interfaces":[],"kind":"OBJECT","name":"__InputValue","possibleTypes":null},{"description":"A GraphQL Schema defines the capabilities of a GraphQL server. It exposes all available types and directives on the server, as well as the entry points for query, mutation, and subscription operations.","enumValues":null,"fields":[{"args":[],"deprecationReason":"","description":"A list of all directives supported by this server.","isDeprecated":false,"name":"directives","type":{"description":null,"kind":"NON_NULL","name":null,"ofType":{"description":null,"kind":"LIST","name":null,"ofType":{"description":null,"kind":"NON_NULL","name":null,"ofType":{"description":"A Directive provides a way to describe alternate runtime execution and type validation behavior in a GraphQL document. \n\nIn some cases, you need to provide options to alter GraphQL's execution behavior in ways field arguments will not suffice, such as conditionally including or skipping a field. Directives provide this by describing additional information to the executor.","kind":"OBJECT","name":"__Directive","ofType":null}}}}},{"args":[],"deprecationReason":"","description":"If this server supports mutation, the type that mutation operations will be rooted at.","isDeprecated":false,"name":"mutationType","type":{"description":"The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.\n\nDepending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name and description, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.","kind":"OBJECT","name":"__Type","ofType":null}},{"args":[],"deprecationReason":"","description":"The type that query operations will be rooted at.","isDeprecated":false,"name":"queryType","type":{"description":null,"kind":"NON_NULL","name":null,"ofType":{"description":"The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.\n\nDepending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name and description, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.","kind":"OBJECT","name":"__Type","ofType":null}}},{"args":[],"deprecationReason":"","description":"If this server supports subscription, the type that subscription operations will be rooted at.","isDeprecated":false,"name":"subscriptionType","type":{"description":"The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.\n\nDepending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name and description, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.","kind":"OBJECT","name":"__Type","ofType":null}},{"args":[],"deprecationReason":"","description":"A list of all types supported by this server.","isDeprecated":false,"name":"types","type":{"description":null,"kind":"NON_NULL","name":null,"ofType":{"description":null,"kind":"LIST","name":null,"ofType":{"description":null,"kind":"NON_NULL","name":null,"ofType":{"description":"The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.\n\nDepending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name and description, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.","kind":"OBJECT","name":"__Type","ofType":null}}}}}],"inputFields":null,"interfaces":[],"kind":"OBJECT","name":"__Schema","possibleTypes":null},{"description":"The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.\n\nDepending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name and description, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.","enumValues":null,"fields":[{"args":[],"deprecationReason":"","description":"","isDeprecated":false,"name":"description","type":{"description":"The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.","kind":"SCALAR","name":"String","ofType":null}},{"args":[{"defaultValue":"false","description":"","name":"includeDeprecated","type":{"description":"The `Boolean` scalar type represents `true` or `false`.","kind":"SCALAR","name":"Boolean","ofType":null}}],"deprecationReason":"","description":"","isDeprecated":false,"name":"enumValues","type":{"description":null,"kind":"LIST","name":null,"ofType":{"description":null,"kind":"NON_NULL","name":null,"ofType":{"description":"One possible value for a given Enum. Enum values are unique values, not a placeholder for a string or numeric value. However an Enum value is returned in a JSON response as a string.","kind":"OBJECT","name":"__EnumValue","ofType":null}}}},{"args":[{"defaultValue":"false","description":"","name":"includeDeprecated","type":{"description":"The `Boolean` scalar type represents `true` or `false`.","kind":"SCALAR","name":"Boolean","ofType":null}}],"deprecationReason":"","description":"","isDeprecated":false,"name":"fields","type":{"description":null,"kind":"LIST","name":null,"ofType":{"description":null,"kind":"NON_NULL","name":null,"ofType":{"description":"Object and Interface types are described by a list of Fields, each of which has a name, potentially a list of arguments, and a return type.","kind":"OBJECT","name":"__Field","ofType":null}}}},{"args":[],"deprecationReason":"","description":"","isDeprecated":false,"name":"inputFields","type":{"description":null,"kind":"LIST","name":null,"ofType":{"description":null,"kind":"NON_NULL","name":null,"ofType":{"description":"Arguments provided to Fields or Directives and the input fields of an InputObject are represented as Input Values which describe their type and optionally a default value.","kind":"OBJECT","name":"__InputValue","ofType":null}}}},{"args":[],"deprecationReason":"","description":"","isDeprecated":false,"name":"interfaces","type":{"description":null,"kind":"LIST","name":null,"ofType":{"description":null,"kind":"NON_NULL","name":null,"ofType":{"description":"The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.\n\nDepending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name and description, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.","kind":"OBJECT","name":"__Type","ofType":null}}}},{"args":[],"deprecationReason":"","description":"","isDeprecated":false,"name":"kind","type":{"description":null,"kind":"NON_NULL","name":null,"ofType":{"description":"An enum describing what kind of type a given `__Type` is","kind":"ENUM","name":"__TypeKind","ofType":null}}},{"args":[],"deprecationReason":"","description":"","isDeprecated":false,"name":"name","type":{"description":"The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.","kind":"SCALAR","name":"String","ofType":null}},{"args":[],"deprecationReason":"","description":"","isDeprecated":false,"name":"ofType","type":{"description":"The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.\n\nDepending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name and description, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.","kind":"OBJECT","name":"__Type","ofType":null}},{"args":[],"deprecationReason":"","description":"","isDeprecated":false,"name":"possibleTypes","type":{"description":null,"kind":"LIST","name":null,"ofType":{"description":null,"kind":"NON_NULL","name":null,"ofType":{"description":"The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.\n\nDepending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name and description, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.","kind":"OBJECT","name":"__Type","ofType":null}}}}],"inputFields":null,"interfaces":[],"kind":"OBJECT","name":"__Type","possibleTypes":null},{"description":"An enum describing what kind of type a given `__Type` is","enumValues":[{"deprecationReason":"","description":"Indicates this type is a non-null. `ofType` is a valid field.","isDeprecated":false,"name":"NON_NULL"},{"deprecationReason":"","description":"Indicates this type is a scalar.","isDeprecated":false,"name":"SCALAR"},{"deprecationReason":"","description":"Indicates this type is an object. `fields` and `interfaces` are valid fields.","isDeprecated":false,"name":"OBJECT"},{"deprecationReason":"","description":"Indicates this type is an interface. `fields` and `possibleTypes` are valid fields.","isDeprecated":false,"name":"INTERFACE"},{"deprecationReason":"","description":"Indicates this type is a union. `possibleTypes` is a valid field.","isDeprecated":false,"name":"UNION"},{"deprecationReason":"","description":"Indicates this type is an enum. `enumValues` is a valid field.","isDeprecated":false,"name":"ENUM"},{"deprecationReason":"","description":"Indicates this type is an input object. `inputFields` is a valid field.","isDeprecated":false,"name":"INPUT_OBJECT"},{"deprecationReason":"","description":"Indicates this type is a list. `ofType` is a valid field.","isDeprecated":false,"name":"LIST"}],"fields":null,"inputFields":null,"interfaces":null,"kind":"ENUM","name":"__TypeKind","possibleTypes":null}]}}},"tabName":"uploader direct"}